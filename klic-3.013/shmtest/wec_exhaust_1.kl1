% Test for "WEC exhausted" (1)

% Unificatin and fetching when WEC is exhausted.  

:- module main.

main :- lib:io(Os), 
	lib:prsl(Os,Os2,'### InterNode Test [WEC exhausted (1)] Begin ###',_), 
	test_ufy(Os2,Os3), 
	test_fetch(Os3,Os4), 
	lib:prsl(Os4,[],'### InterNode Test [WEC exhausted (1)] End ###',_). 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%	import Node   			   export Node
%	            <---(WEC=2**24)---
%		     ------(WEC)------>  ---
%		     ------(WEC)------>   |
%		     ------(WEC)------>   |  N times
%			     :            |
%		     ------(WEC)------>  ---
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

test_ufy(Os,OsE):- 
	lib:prs(Os,Os2,'unification (a-h) : ',_), 
	test_ufy(Os2,OsE,Cs), 
	Cs=[c(23,1,a),c(24,2,b),c(25,3,c),c(26,4,d),
	    c(27,5,e),c(28,6,f),c(29,7,g),c(30,8,h)]. 

test_ufy(Os,OsE,[c(N,Add,Out)|Cs]):- 
	destnode(Add,Current,Dest), 
	throw_consume_and_unify(X,N,Current,Dest), 
	check_value(X,Check), pr(Os,Os2,Check,Out), 
	test_ufy(Os2,OsE,Cs). 
test_ufy(Os,OsE,[]):- lib:prsl(Os,OsE,'...done',_). 

throw_consume_and_unify(X,N,Current,Dest):- wait(Dest) | 
	consume_and_unify(X,N,Current)@node(Dest). 

consume_and_unify(X,N,Parent):- wait(Parent) |
	consume_and_unify(ack,X,N,Parent). 
consume_and_unify(ack,X,N,Parent):- N > 0 | 
	sendback_wec(X,Ack)@node(Parent), 
	consume_and_unify(Ack,X,~(N-1),Parent). 
consume_and_unify(ack,X,N,_):- N =:= 0 | X = value. 

%---------------------------------------------------------------------------
test_fetch(Os,OsE):- 
	lib:prs(Os,Os2,'fetching (a-h) : ',_), 
	test_fetch(Os2,OsE,Cs), 
	Cs=[c(23,1,a),c(24,2,b),c(25,3,c),c(26,4,d),
	    c(27,5,e),c(28,6,f),c(29,7,g),c(30,8,h)]. 

test_fetch(Os,OsE,[c(N,Add,Out)|Cs]):- 
	destnode(Add,Current,Dest), 
	throw_consume_and_fetch(X,N,Current,Dest,Consumed,Check), 
	unify_value(Consumed,X), pr(Os,Os2,Check,Out), 
	test_fetch(Os2,OsE,Cs). 
test_fetch(Os,OsE,[]):- lib:prsl(Os,OsE,'...done',_). 

throw_consume_and_fetch(X,N,Current,Dest,Consumed,Check):- wait(Dest) | 
	consume_and_fetch(X,N,Current,Consumed,Check)@node(Dest). 

consume_and_fetch(X,N,Parent,Consumed,Check):- wait(Parent) |
	consume_and_fetch(ack,X,N,Parent,Consumed,Check). 
consume_and_fetch(ack,X,N,Parent,Consumed,Check):- N > 0 | 
	sendback_wec(X,Ack)@node(Parent), 
	consume_and_fetch(Ack,X,~(N-1),Parent,Consumed,Check). 
consume_and_fetch(ack,X,N,_,Consumed,Check):- N =:= 0 | 
	Consumed = done, check_value(X,Check). 

%---------------------------------------------------------------------------
sendback_wec(_,Ack) :- true | Ack = ack. 
unify_value(done,X):- X = value. 
check_value(value,Check):- Check = done. 

%===========================================================================
destnode(Add,Current,Dest):- 
	current_node(Current,NumberOfNodes), 
	modNode(~(Current+Add),NumberOfNodes,Dest).  

modNode(CalNode,NumberOfNodes,Node) :- CalNode >= 0 | 
	Node := CalNode mod NumberOfNodes.
modNode(CalNode,NumberOfNodes,Node) :- CalNode <  0 | 
	CalNode2 := CalNode + NumberOfNodes, 
	modNode(CalNode2,NumberOfNodes,Node).

pr(Os,OsE,done,Out):- lib:prs(Os,OsE,Out,_). 
otherwise. 
pr(Os,OsE,_,Out):- lib:prs_err(Os,OsE,Out,_). 

