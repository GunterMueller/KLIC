/*-----------------------------------------------------------------------------
Program:  Mastermind (naive generate and test)
Author:   E. Tick 
Date:     February 28 1989

Notes:
1. To run:
    ?- go(NG,NC,N). 
where input NG is the maximum number of guesses and NC is the maximum number
of colors.  Output N is the number of solutions.
    ?- go(3,3,N).
should return N=860 for given code=[2,1,3,2].

-----------------------------------------------------------------------------*/

:- module main.
main :-
	klicio:klicio([stdout(Res)]),
	check_stream(Res).

check_stream(normal(S)) :-
	go(3,3,N),
	S = [putt(N),nl].
check_stream(abnormal).

go(NG,NC,N) :- solve(NG,NC,A), count(A,N).

code(C) :- C=[2,1,3,2].

solve(NG,NC,Out) :- 
    code(C),
    length(C,0,CL),
    gen(NC,Clist),
    genGuess(Guesses,Clist,CL),
    spawn(Guesses,Guesses,CL,[],0,NG,Out,[]).

spawn(    [],    _, _,_,_, _,S0,S1) :- S0=S1.
spawn([G|Gs],Plist,CL,A,N,NG,S0,S2) :-
    test(A,G,Plist,CL,A,N,NG,S0,S1),
    spawn(Gs,Plist,CL,A,N,NG,S1,S2).

test([p(OldBulls,OldCows,Tried)|Gs],Guess,Plist,CL,A,N,NG,S0,S1) :-
    eval(Guess,Tried,Bulls,Cows),
    check(OldCows,Cows,OldBulls,Bulls,Gs,Guess,CL,Plist,A,N,NG,S0,S1).
test([],Guess,Plist,CL,A,N,NG,S0,S1) :-
    code(Code),
    eval(Guess,Code,Bulls,Cows),
    loop(Bulls,Cows,Guess,CL,Plist,A,N,NG,S0,S1).

loop(   CL,   _,    _,CL,    _,A,_, _,S0,S1) :-
	S0 = [A|S1].
otherwise.
loop(Bulls,Cows,Guess,CL,Plist,A,N,NG,S0,S1) :- 
    Bulls < CL,
    add(N, 1, N1),
    N1 < NG |
	spawn(Plist,Plist,CL,[p(Bulls,Cows,Guess)|A],N1,NG,S0,S1).
otherwise.
loop(_,_,_,_,_,_,_,_,S0,S1) :- S0=S1.

check(Sum,Sum,Bulls,Bulls,Gs,Guess,CL,Plist,A,N,NG,S0,S1) :-
	test(Gs,Guess,Plist,CL,A,N,NG,S0,S1).
otherwise.
check(_,_,_,_,_,_,_,_,_,_,_,S0,S1) :- S0=S1.

%----------------------------------------------------------------------

eval(X,Y,Bulls,Cows) :- 
    exact(X,Y,Bulls,0,X1,Y1),
    inexact(X1,Y1,Cows,0).   

exact([],T2,N,I,S1,S2) :-
	N=I, S2=T2, S1=[].
exact([H|T],[H|T2],N,I,S1,S2) :-
    add(I, 1, I1) |
	exact(T,T2,N,I1,S1,S2).
otherwise.
exact([X|T1],[Y|T2],N,I,X1,Y1) :-
	X1 = [X|S1],
	Y1 = [Y|S2],
	exact(T1,T2,N,I,S1,S2).

inexact( _,[],N,I) :- I=N.
otherwise.
inexact([], _,N,I) :- I=N.
inexact([Ht|Tt],Choice,N,I) :-
    delete(Choice,Ht,F,F,Choice,Tt,N,I).

delete([],_,_,_,Choice,Tt,N,I) :-
    inexact(Tt,Choice,N,I).
delete([X|Y],X,F,NewChoice,_,Tt,N,I) :- I1:=I+1 |
    F = Y,
    inexact(Tt,NewChoice,N,I1).
otherwise.
delete([X1|Y],X,F,NewChoice,Choice,Tt,N,I) :-
    F = [X1|Z],
    delete(Y,X,Z,NewChoice,Choice,Tt,N,I).

%----------------------------------------------------------------------
% utilities...
length([],X,Y) :- X=Y.
length([_|T],X,Y) :- X1:=X+1, length(T,X1,Y).

gen(N, X) :- N>0, M:=N-1 | X = [N|Xs], gen(M,Xs).  
gen(N, X) :- N=:=0 | X = [].

count(L,N) :- count(L,0,N).

count([],M,N) :- M = N.
count([_|Xs],M,N) :- M1:=M+1 | count(Xs,M1,N).

genGuess(Out,L,CL) :- N:=CL-1,
    addmyself([[]],L,In,[]),
    genGuess(N,In,L,Out).

genGuess(0,In,_,Out) :- Out=In.
otherwise.
genGuess(N,In,L,Out) :- N1:=N-1 |
    addmyself(In,L,Temp,[]),
    genGuess(N1,Temp,L,Out).

addmyself([], _, O1,O2) :- O1=O2.
addmyself([I|Is], Myself, O1,O3) :-
    combo(Myself, I,      O1,O2),
    addmyself(Is, Myself, O2,O3).

combo([], _,     O1,O2) :- O1=O2.
combo([C|Cs], L, O1,O3) :-
    O1 = [[C|L]|O2], 
    combo(Cs, L, O2,O3).
