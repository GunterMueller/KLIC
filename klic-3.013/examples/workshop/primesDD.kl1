:- module main.                                                           %  1
main :- primes:primes(20000, 100, C), io:outstream([print(C),nl]).        %  2

:- module primes.                                                         %  3
% Sync: メッセージ next の流れるストリームとなる変数である.
% gen_primes はメッセージ next を最初の 1 回を除いて count から受け取る.
% Max以下 (Max1未満) の素数列を生成する. 
primes(Max,Unit,C) :- Max1:=Max+1,                                        %  4
        gen_primes(Max1,Unit,Ps,[next|Sync]), count(Ps,C,Sync).           %  5

% Max 未満の素数列を生成する.
gen_primes(Max,Unit,Ps,Sync) :- gen(Sync,2,Max,Unit,Ns), sift(Ns,Ps).     %  6

% 2 以上の自然数を Unit個ずつ生成する.
% 自然数列の区切り記号として 1 を利用する.
gen([next|_],   N0,Max,Unit,Ns0) :- N1:=N0+Unit, Max=<N1 |                %  7
        gen_unit(N0,Max,Ns0,[]).                                          %  8
gen([next|Sync],N0,Max,Unit,Ns0) :- N1:=N0+Unit, Max >N1 |                %  9
        gen_unit(N0,N1,Ns0,[1|Ns]), gen(Sync,N1,Max,Unit,Ns).             % 10

% N0 〜 Max-1 の自然数を生成する.  Ns0=[N0,N0+1,N0+2,...,Max-1|Ns]
gen_unit(N0,Max,Ns0,Ns) :- N0< Max |                                      % 11
        Ns0=[N0|Ns1], N1:=N0+1, gen_unit(N1,Max,Ns1,Ns).                  % 12
gen_unit(N0,Max,Ns0,Ns) :- N0>=Max | Ns0=Ns.                              % 13

% 新しい素数が入力ストリームより流れてきたならば, その素数を
% 用いたフィルタ・プロセスを生成する.  そして素数カウンタに
% 新しい素数を送る.
% 素数 P として 1 が来た場合は, 区切り記号が到着したことを
% 意味するので 次の自然数列の発生を要求するためにメッセージ
% next を送る.
sift([],     Zs0) :- Zs0=[].                                              % 14
sift([P|Xs1],Zs0) :- P=\=1 |Zs0=[P|Zs1], filter(P,Xs1,Ys), sift(Ys,Zs1).  % 15
sift([1|Xs1],Zs0) :- Zs0=[1|Zs1], sift(Xs1,Zs1).                          % 16

% 入力 X が素数 P で割り切れない場合, 素数候補として X  を次の
% フィルタに送る.
filter(_,[],     Ys0) :-               Ys0=[].                            % 17
filter(P,[X|Xs1],Ys0) :- X mod P=\=0 | Ys0=[X|Ys1], filter(P,Xs1,Ys1).    % 18
filter(P,[X|Xs1],Ys0) :- X mod P=:=0 |              filter(P,Xs1,Ys0).    % 19

% 素数をカウントする. 1 を受け取った場合は, 次の自然数列の発生を
% 促すためにメッセージ send を Sync に送る.
count(L,C,Sync) :- count(L,0,C,Sync).                                     % 20

count([],C0,C,_) :- C=C0.                                                 % 21
count([P|T],C0,C,Sync) :- P =\= 1 | C1:=C0+1, count(T,C1,C,Sync).         % 22
count([1|T],C0,C,Sync) :- Sync=[next|Sync1], count(T,C0,C,Sync1).         % 23
