:- module main.                                                           %  1
main :- primes:primes(1000, C), io:outstream([print(C),nl]).              %  2

:- module primes.                                                         %  3
primes(Max,C) :- gen_primes(Max,Ps), count(Ps,C).                         %  4

% Max 以下の素数列を生成する.
gen_primes(Max,Ps) :- gen(2,Max,Ns), sift(Ns,Ps).                         %  5

% N0 〜 Max の自然数を生成する.  Ns0=[N0,N0+1,N0+2,...,Max]
gen(N0,Max,Ns0) :- N0=<Max | Ns0=[N0|Ns1], N1:=N0+1, gen(N1,Max,Ns1).     %  6
gen(N0,Max,Ns0) :- N0 >Max | Ns0=[].                                      %  7

% 新しい素数が入力ストリームより流れてきたならば, その素数を
% 用いたフィルタ・プロセスを生成する.  そして素数カウンタに
% 新しい素数を送る.
sift([],     Zs0) :- Zs0=[].                                              %  8
sift([P|Xs1],Zs0) :- Zs0=[P|Zs1], filter(P,Xs1,Ys), sift(Ys,Zs1).         %  9

% 入力 X が素数 P で割り切れない場合, 素数候補として X  を次の
% フィルタに送る.
filter(_,[],     Ys0) :-               Ys0=[].                            % 10
filter(P,[X|Xs1],Ys0) :- X mod P=\=0 | Ys0=[X|Ys1], filter(P,Xs1,Ys1).    % 11
filter(P,[X|Xs1],Ys0) :- X mod P=:=0 |              filter(P,Xs1,Ys0).    % 12

% 素数をカウントする.
count(L,C) :- count(L,0,C).                                               % 13

count([],C0,C) :- C=C0.                                                   % 14
count([_|T],C0,C) :- C1:=C0+1, count(T,C1,C).                             % 15
