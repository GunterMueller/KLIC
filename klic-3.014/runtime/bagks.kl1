/* ---------------------------------------------------------- 
%   (C) 1994 Institute for New Generation Computer Technology 
%       (Read COPYRIGHT for detailed information.) 
%   (C)1996, 1997, 1998, 1999 Japan Information Processing Development Center
%       (Read COPYRIGHT-JIPDEC for detailed information.)
----------------------------------------------------------- */

:- module keyed_sorted_bag.

create(Stream) :-
    splay_tree:create(Pool),
    main(Stream,[],Pool).

create(Cmpr,Stream) :-
    splay_tree:create(Cmpr,Pool),
    main(Stream,[],Pool).

main([],[])+_Pool.
main([],[S|ST])+Pool :- main(S,ST)+Pool.
main([do(S)|T],ST)+Pool :- main(S,[T|ST])+Pool.
otherwise.
main([Message|T],ST)+Pool :- message(Message)-Pool, main(T,ST)+Pool.

message(empty(YorN))-Pool :-
    splay_tree:empty(YorN)-Pool.
message(empty(Key,YorN))-Pool :-
    splay_tree:empty(Key,YorN)-Pool.
message(put(Key,Value))-Pool :-
    splay_tree:empty(Key,Empty)-Pool,
    (
	Empty=yes -> splay_tree:put(Key,[Value])-Pool
      ;
	Empty=no ->
	splay_tree:update(Key,Values,New)-Pool,
	append(Values,[Value],New)
    ).
message(get(Key,Value))-Pool :-
    splay_tree:get(Key,[Value|Rest])-Pool,
    (
	Rest=[] -> true
      ; otherwise ;
	true -> splay_tree:put(Key,Rest)-Pool
    ).
message(get_if_any(Key,Value))-Pool :-
    splay_tree:empty(Key,Empty)-Pool,
    (
	Empty=yes -> Value={}, New=[]
      ;
	Empty=no ->
	message(get(Key,V))-Pool,
	Value={V}
    ).
message(get_all(Values))-Pool :-
    splay_tree:get_all(All)-Pool,
    flatten(All,Values).
message(get_all(Key,Values))-Pool :-
    splay_tree:get(Key,Values)-Pool.
message(carbon_copy(Values))-Pool :-
    splay_tree:get_all(All)+Pool+_,
    flatten(All,Values).
message(carbon_copy(Key,Values))-Pool :-
    splay_tree:empty(Key,Empty)-Pool,
    (
	Empty=yes -> Values=[]
      ;
	Empty=no ->
	splay_tree:update(Key,Values,Values)-Pool
    ).

message(get_and_put(Key,Old,New))-Pool :-
    splay_tree:empty(Key,no)-Pool,
    splay_tree:update(Key,[Old|Values],NewValues)-Pool,
    append(Values,[New],NewValues).
message(get_if_any_and_put(Key,Old,New))-Pool :-
    splay_tree:empty(Key,Empty)-Pool,
    (
	Empty=yes ->
	message(put(Key,New))-Pool,
	Old={}
      ;
	Empty=no ->
	message(get_and_put(Key,V,New))-Pool,
	Old={V}
    ).
message(get_and_put_if_any(Key,Old,New0,New))-Pool :-
    splay_tree:empty(Key,Empty)-Pool,
    (
	Empty=yes -> Old={}, New={New0}
      ;
	Empty=no ->
	message(get_and_put(Key,V,New0))-Pool,
	Old={V}, New={}
    ).
message(get_max_if_any(Elem))-Pool :-
    splay_tree:empty(Empty)-Pool,
    (
	Empty=yes -> Elem={}
      ;
	Empty=no ->
	splay_tree:get_max(Key,Values)-Pool,
	last_elem(Values,Preceding,Last),
	(
	    Preceding=[] -> true	/* AMANUMA */
	  ; otherwise ;
	    true -> splay_tree:put(Key,Preceding)-Pool
	),
	Elem={Key,Last}
    ).
message(get_min_if_any(Elem))-Pool :-
    splay_tree:empty(Empty)-Pool,
    (
	Empty=yes -> Elem={}
      ;
	Empty=no ->
	splay_tree:get_min(Key,[V|Values])-Pool,
	(
	    Values=[] -> true
	  ; otherwise ;
	    true -> splay_tree:put(Key,Values)-Pool
	),
	Elem={Key,V}
    ).

flatten([])+Flat :- Flat=[].
flatten([K=L|T])+Flat :-
    flatten(L,K)-Flat, flatten(T)+Flat.

flatten([],_K,Flat,FlatT) :- Flat=FlatT.
flatten([V|T],K,Flat,FlatT) :-
    Flat=[{K,V}|Flat1], flatten(T,K,Flat1,FlatT).

append([],Y,Z) :- Y=Z.
append([W|X],Y,WZ) :- WZ=[W|Z], append(X,Y,Z).

last_elem([X],P,L) :- P=[], L=X.
otherwise.
last_elem([H|T],P,L) :- P=[H|P1], last_elem(T,P1,L).
