:- module main.                                                           %  1
main :- primes(20000,NP), io:outstream([print(NP),nl]).                   %  2

primes(Max,NP) :- gen_primes(Max,Ps), count(Ps,NP).                       %  3

gen_primes(Max,Ps) :- gen(2,Max,Ns)@lower_priority, sift(Ns,Ps).          %  4

gen(N,Max,Ns) :- N >Max | Ns=[].                                          %  5
gen(N,Max,Ns) :- N=<Max | Ns=[N|Ns2], N2:=N+1, gen(N2,Max,Ns2).           %  6

sift([],    Zs) :- Zs=[].                                                 %  7
sift([P|Xs],Zs) :- Zs=[P|Zs2], filter(P,Xs,Ys), sift(Ys,Zs2).             %  8

filter(_,[],    Ys) :-               Ys=[].                               %  9
filter(P,[X|Xs],Ys) :- X mod P=\=0 | Ys=[X|Ys2], filter(P,Xs,Ys2).        % 10
filter(P,[X|Xs],Ys) :- X mod P=:=0 |             filter(P,Xs,Ys).         % 11

count(Ps,NP) :- count(Ps,0,NP).                                           % 12

count([],    WNP,NP) :- WNP=NP.                                           % 13
count([P|Ps],WNP,NP) :- WNP2:=WNP+1, count(Ps,WNP2,NP).                   % 14
