% test for "general unification" (1)

:- module main.
main :- lib:io(Os), 
	lib:prsl(Os,Os2,'### InterNode Test [General Unification (1)] Begin ###',_), 
	f1v1(Os2,Os3), 
	v1f1(Os3,Os4), 
	f2v2(Os4,Os5), 
	v2f2(Os5,Os6), 
	lib:prsl(Os6,[],'### InterNode Test [General Unification (1)] End ###',_). 

%---------------------------------------------------------------------------
f1v1(Os,OsE):- 
	lib:prs(Os,Os2,'F=f(V), V={F} : (a-e) : ',_),
	f1v1(Os2,OsE,Us), 
	Us = [u(1,f({}),1,a),
	      u(2,f({f}),3,b),
	      u(3,f({f({})}),2,c),
	      u(4,f({f({f})}),4,d),
	      u(5,f({f({f({})})}),5,e)]. 

f1v1(Os,OsE,[u(N,Func,Add,Out)|Us]):- 
	nextNode(Add,Node), fork_f1v1(Os,Os2,N,Func,Out,Node), 
	f1v1(Os2,OsE,Us). 
f1v1(Os,OsE,[]):- lib:prsl(Os,OsE,'...done',_). 

fork_f1v1(Os,Os2,N,Func,Out,Node):- wait(Node) | 
	fork_exe_f1v1(N,Var,Done,done,Ack)@node(Node), 
	wait_ufy(Ack,Var,Func), pr(Os,Os2,Done,Out). 

fork_exe_f1v1(N,Func,Da,Db,Ack):- Ack=ack, uf1(N,Func,Da,Db). 

%---------------------------------------------------------------------------
v1f1(Os,OsE):- 
	lib:prs(Os,Os2,'V={F}, F=f(V) : (a-e) : ',_),
	v1f1(Os2,OsE,Us), 
	Us = [u(1,{f},1,a),
	      u(2,{f({})},3,b),
	      u(3,{f({f})},2,c),
	      u(4,{f({f({})})},4,d),
	      u(5,{f({f({f})})},5,e)]. 

v1f1(Os,OsE,[u(N,Func,Add,Out)|Us]):- 
	nextNode(Add,Node), fork_v1f1(Os,Os2,N,Func,Out,Node), 
	v1f1(Os2,OsE,Us). 
v1f1(Os,OsE,[]):- lib:prsl(Os,OsE,'...done',_). 

fork_v1f1(Os,Os2,N,Func,Out,Node):- wait(Node) | 
	fork_exe_v1f1(N,Var,Done,done,Ack)@node(Node), 
	wait_ufy(Ack,Var,Func), pr(Os,Os2,Done,Out). 

fork_exe_v1f1(N,Func,Da,Db,Ack):- Ack=ack, uv1(N,Func,Da,Db). 

%---------------------------------------------------------------------------
f2v2(Os,OsE):- 
	lib:prs(Os,Os2,'F=f(V,V), V={F,F} : (a-c) : ',_),
	f2v2(Os2,OsE,Us), 
	Us = [u(1,f({},{}),1,a),
	      u(2,f({f,f},{f,f}),3,b),
	      u(3,f({f({},{}),f({},{})},{f({},{}),f({},{})}),4,c)]. 

f2v2(Os,OsE,[u(N,Func,Add,Out)|Us]):- 
	nextNode(Add,Node), fork_f2v2(Os,Os2,N,Func,Out,Node), 
	f2v2(Os2,OsE,Us). 
f2v2(Os,OsE,[]):- lib:prsl(Os,OsE,'...done',_). 

fork_f2v2(Os,Os2,N,Func,Out,Node):- wait(Node) | 
	fork_exe_f2v2(N,Var,Done,done,Ack)@node(Node), 
	wait_ufy(Ack,Var,Func), pr(Os,Os2,Done,Out). 

fork_exe_f2v2(N,Func,Da,Db,Ack):- Ack=ack, uf2(N,Func,Da,Db). 

%---------------------------------------------------------------------------
v2f2(Os,OsE):- 
	lib:prs(Os,Os2,'V={F,F}, F=f(V,V) : (a-c) : ',_),
	v2f2(Os2,OsE,Us), 
	Us = [u(1,{f,f},1,a),
	      u(2,{f({},{}),f({},{})},3,b),
	      u(3,{f({f,f},{f,f}),f({f,f},{f,f})},4,c)]. 

v2f2(Os,OsE,[u(N,Func,Add,Out)|Us]):- 
	nextNode(Add,Node), fork_v2f2(Os,Os2,N,Func,Out,Node), 
	v2f2(Os2,OsE,Us). 
v2f2(Os,OsE,[]):- lib:prsl(Os,OsE,'...done',_). 

fork_v2f2(Os,Os2,N,Func,Out,Node):- wait(Node) | 
	fork_exe_v2f2(N,Var,Done,done,Ack)@node(Node), 
	wait_ufy(Ack,Var,Func), pr(Os,Os2,Done,Out). 

fork_exe_v2f2(N,Func,Da,Db,Ack):- Ack=ack, uv2(N,Func,Da,Db). 

%---------------------------------------------------------------------------
uf1(N,Func,Da,Db):- N > 0 | Func = f(V), wv1(~(N-1),V,Da,Db). 
uf1(N,_,Da,Db):- N=:=0 | Da=Db. 

wv1(N,{F},Da,Db):- N > 0 | uf1(~(N-1),F,Da,Db). 
wv1(N,_,Da,Db):- N=:=0 | Da=Db. 

%---------------------------------------------------------------------------
uv1(N,Vec,Da,Db):- N > 0 | Vec = {F}, wf1(~(N-1),F,Da,Db). 
uv1(N,_,Da,Db):- N=:=0 | Da=Db. 

wf1(N,f(V),Da,Db):- N > 0 | uv1(~(N-1),V,Da,Db). 
wf1(N,_,Da,Db):- N=:=0 | Da=Db. 

%---------------------------------------------------------------------------
uf2(N,Func,Da,Db):- N > 0 | 
	Func = f(V1,V2), wv2(~(N-1),V1,Da,Dab), wv2(~(N-1),V2,Dab,Db). 
uf2(N,_,Da,Db):- N=:=0 | Da=Db. 

wv2(N,{F1,F2},Da,Db):- N > 0 | uf2(~(N-1),F1,Da,Dab), uf2(~(N-1),F2,Dab,Db). 
wv2(N,_,Da,Db):- N=:=0 | Da=Db. 

%---------------------------------------------------------------------------
uv2(N,Vec,Da,Db):- N > 0 | Vec = {F1,F2}, wf2(~(N-1),F1,Da,Dab), wf2(~(N-1),F2,Dab,Db). 
uv2(N,_,Da,Db):- N=:=0 | Da=Db. 

wf2(N,f(V1,V2),Da,Db):- N > 0 | uv2(~(N-1),V1,Da,Dab), uv2(~(N-1),V2,Dab,Db). 
wf2(N,_,Da,Db):- N=:=0 | Da=Db. 

%===========================================================================
wait_ufy(Wait,DataA,DataB):- wait(Wait) | DataA = DataB. 

nextNode(Add,Node):- 
	current_node(CurrentNode,NumberOfNodes), 
	modNode(~(CurrentNode+Add),NumberOfNodes,Node).  

modNode(CalNode,NumberOfNodes,Node) :- CalNode >= 0 | 
	Node := CalNode mod NumberOfNodes.
modNode(CalNode,NumberOfNodes,Node) :- CalNode <  0 | 
	CalNode2 := CalNode + NumberOfNodes, 
	modNode(CalNode2,NumberOfNodes,Node).

pr(Os,Os2,done,Out):- lib:prs(Os,Os2,Out,_). 
otherwise. 
pr(Os,Os2,_,Out):- lib:prs_err(Os,Os2,Out,_). 

